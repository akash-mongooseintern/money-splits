// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AdminStatus {
  Active @map("active")

  @@map("admin_status")
}

model Admin {
  id           String      @id @default(uuid()) @db.Uuid
  firstname    String
  lastname     String
  email        String      @unique
  profileImage String?     @map("profile_image")
  status       AdminStatus @default(Active)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  meta         AdminMeta?

  @@map("admin")
}

model AdminMeta {
  passwordSalt String? @map("password_salt")
  passwordHash String? @map("password_hash")
  admin        Admin   @relation(fields: [adminId], references: [id])
  adminId      String  @unique() @map("admin_id") @db.Uuid

  @@map("admin_meta")
}

enum UserStatus {
  Active  @map("active")
  Blocked @map("blocked")

  @@map("user_status")
}

model User {
  id                      String                    @id @default(uuid()) @db.Uuid
  firstname               String
  lastname                String
  username                String?                   @unique
  email                   String                    @unique
  dialCode                String?                   @map("dial_code")
  mobile                  String?                   @unique
  profileImage            String?                   @map("profile_image")
  isVerified              Boolean                   @default(false) @map("is_verified")
  country                 String?
  status                  UserStatus                @default(Active)
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @updatedAt @map("updated_at")
  meta                    UserMeta?
  settings                UserSetting[]
  transactionUserRelation TransactionUserRelation[]
  lender                  Settlements[]             @relation("lender")
  borrower                Settlements[]             @relation("borrower")

  @@map("user")
}

model UserMeta {
  googleId     String? @unique @map("google_id")
  passwordSalt String? @map("password_salt")
  passwordHash String? @map("password_hash")
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique() @map("user_id") @db.Uuid

  @@map("user_meta")
}

enum OtpTransport {
  Email  @map("email")
  Mobile @map("mobile")

  @@map("otp_transport")
}

model Otp {
  code             String
  attempt          Int          @default(1) @db.SmallInt
  lastSentAt       DateTime     @default(now()) @map("last_sent_at")
  retries          Int          @default(0) @db.SmallInt
  transport        OtpTransport
  target           String
  lastCodeVerified Boolean      @default(false) @map("last_code_verified")
  blocked          Boolean      @default(false)

  @@unique([transport, target])
  @@map("otp")
}

enum SettingType {
  Binary       @map("binary")
  MultiSelect  @map("multi_select")
  SingleSelect @map("single_select")

  @@map("setting_type")
}

enum SettingContext {
  User   @map("user")
  System @map("System")

  @@map("setting_context")
}

model Setting {
  id               Int             @id @default(autoincrement())
  mappedTo         String          @map("mapped_to")
  text             String          @default("")
  description      String          @default("")
  type             SettingType
  context          SettingContext
  default          Json
  isDefinedOptions Boolean         @map("is_defined_options")
  subSettings      Setting[]       @relation("SubSettings")
  dependsOn        Setting?        @relation("SubSettings", fields: [parentId], references: [id])
  parentId         Int?            @map("parent_id")
  options          SettingOption[]
  userSettings     UserSetting[]
  systemSettings   SystemSetting[]

  @@unique([context, mappedTo])
  @@map("setting")
}

model SettingOption {
  id        Int     @id @default(autoincrement())
  text      String  @default("")
  value     String
  setting   Setting @relation(fields: [settingId], references: [id])
  settingId Int     @map("setting_id")

  @@unique([value, settingId])
  @@map("setting_option")
}

model UserSetting {
  selection Json
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @map("user_id") @db.Uuid
  setting   Setting @relation(fields: [settingId], references: [id])
  settingId Int     @map("setting_id")

  @@id([userId, settingId])
  @@map("user_setting")
}

model SystemSetting {
  selection Json
  setting   Setting @relation(fields: [settingId], references: [id])
  settingId Int     @map("setting_id")

  @@id([settingId])
  @@map("system_setting")
}

model Transactions {
  id                      Int                       @id @default(autoincrement())
  amount                  Int
  parentTransactionId     Int?                      @map("parent_transaction_id")
  childTransaction        Transactions[]            @relation("parent_child_transaction")
  parentTransaction       Transactions?             @relation("parent_child_transaction", fields: [parentTransactionId], references: [id])
  transactionUserRelation TransactionUserRelation[]
  createAt                DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @updatedAt @map("updated_at")
  meta                    TransactionMeta?
  settlements             Settlements[]

  @@map("transactions")
}

model TransactionUserRelation {
  transactionId Int          @map("transaction_id")
  transaction   Transactions @relation(fields: [transactionId], references: [id])
  userId        String       @map("user_id") @db.Uuid
  user          User         @relation(fields: [userId], references: [id])

  @@unique([transactionId, userId])
  @@map("transaction_user_relation")
}

model TransactionMeta {
  transactionId Int          @unique @map("transaction_id")
  transaction   Transactions @relation(fields: [transactionId], references: [id])
  amount        Int
  totalPerson   Int          @map("total_person")

  @@map("transaction_meta")
}

enum SettlementsStatus {
  Pending   @map("pending")
  Completed @map("completed")
}

model Settlements {
  transactionId Int               @map("transaction_id")
  transaction   Transactions      @relation(fields: [transactionId], references: [id])
  amount        Float
  lenderId      String            @map("lender_id") @db.Uuid
  lender        User              @relation("lender", fields: [lenderId], references: [id])
  borrowerId    String            @map("borrower_id") @db.Uuid
  borrower      User              @relation("borrower", fields: [borrowerId], references: [id])
  status        SettlementsStatus @default(Pending)

  @@unique([transactionId, lenderId, borrowerId])
  @@map("settlements")
}
